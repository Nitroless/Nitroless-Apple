//
//  MessagesViewController.swift
//  Stickers
//
//  Created by Paras KCD on 2022-12-19.
//

import UIKit
import Messages
import SwiftUI

class MessagesViewController: MSMessagesAppViewController, ObservableObject {
    
    private lazy var suiView: UIView = {
        let messageView = MessagesView(vc: self)
        
        let view = UIHostingController(rootView: messageView).view!
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var expandedSuiView: UIView = {
        let expandedMessageView = ExpandedMessagesView(vc: self)
        let view = UIHostingController(rootView: expandedMessageView).view!
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        view.addSubview(suiView)
        NSLayoutConstraint.activate([
            suiView.topAnchor.constraint(equalTo: view.topAnchor),
            suiView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            suiView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            suiView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .compact {
            view.addSubview(suiView)
            NSLayoutConstraint.activate([
                suiView.topAnchor.constraint(equalTo: view.topAnchor),
                suiView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                suiView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                suiView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
            ])
        } else {
            view.addSubview(expandedSuiView)
            NSLayoutConstraint.activate([
                expandedSuiView.topAnchor.constraint(equalTo: view.topAnchor),
                expandedSuiView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                expandedSuiView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                expandedSuiView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
            ])
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}
